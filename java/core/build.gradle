apply plugin: 'osgi'

configurations {
  rnc
  springWeb
  compile.extendsFrom springWeb
}

dependencies {
  springWeb 'org.springframework:spring-web:4.0.3.RELEASE'
  compile 'commons-lang:commons-lang:2.6',
      "net.sf.saxon:Saxon-HE:$saxonVersion", 
      // TODO: Java 7 only   'jgraphx:jgraphx:3.0.1.1', 
      'isorelax:isorelax:20030108', 
      'commons-lang:commons-lang:2.6',
      'org.jsoup:jsoup:1.8.2'
  compile('com.thaiopensource:jing:20091111') {
    exclude module: 'xml-apis'
    exclude module: 'saxon', group: 'net.sf.saxon'
  }
  rnc('com.thaiopensource:trang:20091111') {
    exclude module: 'xml-apis'
    exclude module: 'saxon', group: 'net.sf.saxon'
  }
  compile('jaxen:jaxen:1.1.6') {
    exclude module: 'xml-apis'
  }
  testCompile 'org.springframework.hateoas:spring-hateoas:0.19.0.RELEASE',
      'de.escalon.hypermedia:hydra-spring:0.2.0-beta2'
  
}

def examples = project.rootProject.fileTree(dir: 'specification/examples', include: '**/*.radl')
def schemaRnc = project.rootProject.file('specification/schema/radl.rnc')
def schemaXsd = new File(buildDir, 'xsd/radl.xsd')

task translateRncToXsd(type: JavaExec) {
  main = 'com.thaiopensource.relaxng.translate.Driver'
  args = ['-I', 'rnc', '-O', 'xsd', schemaRnc.path, schemaXsd.path]
  classpath configurations.rnc
  ignoreExitValue = true
  
  def outputFile = new File(buildDir, 'rnc2xsd.out')
  doFirst {
    errorOutput = new FileOutputStream(outputFile)
    schemaXsd.parentFile.mkdirs()
    new File(schemaXsd.parentFile, 'README.txt').withWriter { writer ->
      writer.println '''WARNING: These XML Schema files are automatically generated from the normative Relax NG schemas
and may not in all cases be accurate. They are provided as a service only. Use at your own risk.'''
    }
  }
  doLast {
    if (outputFile.text.contains('syntax error')) {
      throw new GradleException("Error parsing schema:\n$outputFile.text")
    }
  }
}

jar {
  dependsOn translateRncToXsd
  from schemaXsd.parentFile.path, {
    into 'schema/xsd'
  }
}

task validateRadl(type: JavaExec, dependsOn: 'jar') {
  main = 'radl.core.validation.RadlValidator'
  args examples*.path
  classpath jar.archivePath, configurations.runtime
}

check.dependsOn 'validateRadl'

task radl2documentation(type: JavaExec, dependsOn: 'validateRadl') {
  main = 'radl.core.documentation.DocumentationGenerator'
  args new File(project.docsDir, 'clientDoc').path
  args examples*.path
  classpath jar.archivePath, configurations.runtime
  doFirst {
    errorOutput = new FileOutputStream(new File(buildDir, 'radl2doc.out'))
  }
}

assemble.dependsOn 'radl2documentation'

jar {
  manifest {
    name = 'radl-core'
    symbolicName = 'radl-core'
  }
}

task testValidation(type: Test) {
  include 'radl/core/validation/LintValidatorTest.class'
  workingDir = project.rootProject.projectDir
  testLogging {
    showStandardStreams = true 
    exceptionFormat 'full'
    maxGranularity = 3
  } 
}

test {
  systemProperty 'radl.dir', project.rootProject.projectDir
  systemProperty 'classpath', "${configurations.runtime.asPath}${File.pathSeparator}${jar.archivePath}"
}

task testDocumentation(type: Test) {
  include 'radl/core/documentation/DocumentationTest.class'
  workingDir = project.rootProject.projectDir
  testLogging {
    showStandardStreams = true 
    exceptionFormat 'full'
    maxGranularity = 3
  } 
}
